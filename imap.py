import imaplib
import email
from email.header import decode_header
import re
import email.utils
import datetime
from dotenv import load_dotenv
import os
import time

# Load environment variables from .env file
load_dotenv()
IMAP_SERVER   = "imap.mail.ru"
IMAP_PORT     = 993
EMAIL_ADDRESS = os.getenv("EMAIL_ADDRESS")
PASSWORD      = os.getenv("PASSWORD_EMAIL")

def decode_subject(subject):
    """Decode non-ASCII email subjects."""
    if not subject:
        return ""
    decoded, encoding = decode_header(subject)[0]
    if isinstance(decoded, bytes):
        return decoded.decode(encoding or "utf-8", errors="replace")
    return decoded

def extract_otp(text):
    """–ò—â–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ —Ä–æ–≤–Ω–æ 6 —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥."""
    m = re.search(r"\b\d{6}\b", text)
    return m.group(0) if m else None

def get_email_date(msg):
    """–ü–∞—Ä—Å–∏—Ç Date-–∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ datetime."""
    date_str = msg.get("Date", "")
    tup = email.utils.parsedate_tz(date_str)
    return datetime.datetime.fromtimestamp(email.utils.mktime_tz(tup)) if tup else datetime.datetime.min

def get_email_text(msg):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å –ø–∏—Å—å–º–∞."""
    if msg.is_multipart():
        for part in msg.walk():
            if part.get_content_type() == "text/plain":
                charset = part.get_content_charset() or "utf-8"
                return part.get_payload(decode=True).decode(charset, errors="replace")
    else:
        charset = msg.get_content_charset() or "utf-8"
        return msg.get_payload(decode=True).decode(charset, errors="replace")
    return ""

def main(country, max_attempts=None):
    if not EMAIL_ADDRESS or not PASSWORD:
        print("ERROR: EMAIL_ADDRESS or PASSWORD not set")
        return

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ª–æ–≥–∏–Ω–∏–º—Å—è –æ–¥–∏–Ω —Ä–∞–∑
    mail = imaplib.IMAP4_SSL(IMAP_SERVER, IMAP_PORT)
    mail.login(EMAIL_ADDRESS, PASSWORD)
    print("‚úÖ Logged in")
    mail.select("inbox")

    attempts = 0
    while True:
        attempts += 1
        if max_attempts and attempts > max_attempts:
            print("üö´ Max attempts reached, exiting.")
            break

        # –ò—â–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º Subject –∏ From
        email_ids = []
        for sender in ("donotreply@vfsglobal.com", "donotreply@vfshelpline.com"):
            status, data = mail.search(
                None,
                f'UNSEEN FROM "{sender}" SUBJECT "One Time Password"'
            )
            if status == "OK":
                email_ids += data[0].split()
            else:
                print(f"‚ö†Ô∏è  Search error for {sender}")

        email_ids = list(set(email_ids))
        if not email_ids:
            print(f"{datetime.datetime.now()} ‚Äî –Ω–µ—Ç –Ω–æ–≤—ã—Ö OTP, –∂–¥—É 10 —Å–µ–∫—É–Ω–¥‚Ä¶")
            time.sleep(10)
            continue

        # –ü–∞—Ä—Å–∏–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ country
        candidates = []
        for eid in email_ids:
            status, msg_data = mail.fetch(eid, "(RFC822)")
            if status != "OK":
                continue
            msg = email.message_from_bytes(msg_data[0][1])
            text = get_email_text(msg)
            if not re.search(country, text, re.IGNORECASE):
                # –Ω–µ —Ç–æ –ø–∏—Å—å–º–æ ‚Äî –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –Ω–µ –≥–æ–Ω—è—Ç—å –≤ –∫–∞–∂–¥–æ–º —Ü–∏–∫–ª–µ
                mail.store(eid, "+FLAGS", "\\Seen")
                continue
            date = get_email_date(msg)
            candidates.append((eid, date, msg, text))

        if not candidates:
            print(f"{datetime.datetime.now()} ‚Äî –Ω–µ—Ç OTP –¥–ª—è '{country}', –∂–¥—É 10 —Å–µ–∫—É–Ω–¥‚Ä¶")
            time.sleep(10)
            continue

        # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ —Å–≤–µ–∂–µ–µ
        candidates.sort(key=lambda x: x[1], reverse=True)
        eid, date, msg, text = candidates[0]
        otp = extract_otp(text)
        if otp:
            print(f"üéâ –ù–∞–π–¥–µ–Ω OTP: {otp}")
            mail.store(eid, "+FLAGS", "\\Seen")
            mail.logout()
            return otp
        else:
            print(f"{datetime.datetime.now()} ‚Äî –Ω–µ—Ç 6-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞ –≤ –ø–∏—Å—å–º–µ, –∂–¥—É 10 —Å–µ–∫—É–Ω–¥‚Ä¶")
            mail.store(eid, "+FLAGS", "\\Seen")
            time.sleep(10)

if __name__ == "__main__":
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å max_attempts
    otp = main(country="cze", max_attempts=None)